{"ast":null,"code":"import _classCallCheck from \"/Users/dhruvilpatel/Documents/Sponsorship/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dhruvilpatel/Documents/Sponsorship/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @author Shivan Modha\n * @description User Profile Handler with Server Side Interaction\n * @version 0.0.1\n * Created 12/26/18\n */\n\n/***************************************************************IMPORTS***************************************************************/\nimport cookie from \"react-cookies\";\nimport request from \"request\";\nimport { defaults } from \"../Defaults\";\n/***************************************************************IMPORTS***************************************************************/\n\n/***************************************************************PROFILE***************************************************************/\n\n/**\n * Configure the all of the urls that we will need to access the rest api\n */\n\nvar BASE = process.env.NODE_ENV && process.env.NODE_ENV === \"development\" || window.location.origin.includes(\"dev.hackru.org\") ? defaults.rest.dev : defaults.rest.prod;\nvar ENDPOINTS = {\n  /**\n   * Default login url\n   * @params\n   * {\n   *     \"headers\": {\n   *         \"Content-Type\": \"application/json\"\n   *     },\n   *     \"body\": {\n   *         \"email\": \"<EMAIL>\",\n   *         \"password\": \"<PASSWORD>\"\n   *     }\n   * }\n   * @returns \n   * {\n   *     \"statusCode\": 200,\n   *     \"isBase64Encoded\": false,\n   *     \"headers\": {\n   *         \"Content-Type\": \"application/json\",\n   *         \"Access-Control-Allow-Origin\": [\n   *             \"*\"\n   *         ],\n   *         \"Access-Control-Allow-Headers\": [\n   *             \"Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\"\n   *         ],\n   *         \"Access-Control-Allow-Credentials\": [\n   *             true\n   *         ]\n   *     },\n   *     \"body\": \"{\\\"auth\\\": {\\\"token\\\": \\\"a6390c07-3bef-4062-ae69-3a0e983af124\\\", \\\"valid_until\\\": \\\"2018-12-29T18:41:17.225329\\\", \\\"email\\\": \\\"TESTING123\\\"}}\"\n   * }\n   */\n  \"login\": BASE + \"/authorize\",\n\n  /**\n   * Default signup url, expects\n   */\n  \"signup\": BASE + \"/create\",\n\n  /**\n   * Default logout url, expects\n   */\n  \"logout\": \"< IMPLEMENT ME >\",\n\n  /**\n   * Default user url, expects\n   */\n  \"userData\": BASE + \"/read\",\n\n  /**\n   * Default user update information, expects\n   */\n  \"update\": BASE + \"/update\",\n\n  /**\n   * Create forgot magic link to reset password\n   */\n  \"forgot\": BASE + \"/createmagiclink\",\n\n  /**\n   * Reset password from magic link to reset password\n   */\n  \"resetpassword\": BASE + \"/consume\"\n  /**\n   * Standard profile handler for the entire application\n   */\n\n};\n\nvar Profile =\n/*#__PURE__*/\nfunction () {\n  function Profile() {\n    _classCallCheck(this, Profile);\n\n    this.Login = this.Login.bind(this);\n    this.Logout = this.Logout.bind(this);\n    this.SignUp = this.SignUp.bind(this);\n    this._login = this._login.bind(this);\n    this._token = cookie.load(\"token\");\n    this._email = cookie.load(\"email\");\n    this._valid_until = Date.parse(cookie.load(\"valid_until\"));\n\n    if (this._token && this._email && this._valid_until && this._valid_until > Date.now()) {\n      this.isLoggedIn = true;\n    } else {\n      this.isLoggedIn = false;\n    }\n  }\n\n  _createClass(Profile, [{\n    key: \"Login\",\n    value: function Login(email, password, callback) {\n      var _this = this;\n\n      if (this.isLoggedIn) {\n        callback(\"User is already logged in\");\n      } else {\n        if (!email) {\n          callback(\"Invalid email\");\n        } else if (!password) {\n          callback(\"Invalid password\");\n        } else {\n          request({\n            method: \"POST\",\n            uri: ENDPOINTS.login,\n            body: {\n              email: email,\n              password: password\n            },\n            json: true\n          }, function (error, response, body) {\n            if (error) {\n              callback(\"An error occured when attempting login\");\n            } else {\n              if (body.statusCode === 403) {\n                callback(\"Invalid email or password\");\n              } else if (body.statusCode === 200) {\n                var data = JSON.parse(body.body);\n                var token = data.auth.token;\n                var valid_until = data.auth.valid_until;\n\n                _this._login(email, token, valid_until);\n\n                callback();\n              } else {\n                callback(body.body ? body.body : \"Unexpected Error\");\n              }\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"SignUp\",\n    value: function SignUp(firstname, lastname, email, password, confirmpassword, callback) {\n      var _this2 = this;\n\n      if (this.isLoggedIn) {\n        callback(\"User is already logged in\");\n      } else {\n        if (!firstname) {\n          callback(\"Invalid first name\");\n        } else if (!lastname) {\n          callback(\"Invalid last name\");\n        } else if (!email) {\n          callback(\"Invalid email\");\n        } else if (!password) {\n          callback(\"Invalid password\");\n        } else if (!confirmpassword) {\n          callback(\"Invalid password\");\n        } else if (password !== confirmpassword) {\n          callback(\"Passwords don't match\");\n        } else {\n          /*\n          From the legacy code. These are all of the fields of registration_status, and what they mean\n          ```jsx\n          const displayStatuses = {\n              'unregistered': 'Not registered',\n              'registered': 'Application submitted',\n              'rejected': 'Application submitted',\n              'checked-in': 'Checked in!',\n              'confirmation': 'Accepted! Please RSVP',\n              'coming': 'Attending',\n              'not-coming': 'Not Attending',\n              'confirmed': 'Attendance confirmed!',\n              'waitlist': 'Application submitted'\n          };\n          ```\n          */\n          request({\n            method: \"POST\",\n            uri: ENDPOINTS.signup,\n            body: {\n              email: email,\n              password: password,\n              registration_status: \"unregistered\" //\"waitlist\" is one of them\n\n            },\n            json: true\n          }, function (error, response, body) {\n            if (error) {\n              callback(\"An error occured when attempting signup. Failed at 1/2\");\n            } else {\n              console.log(body);\n\n              if (body.statusCode === 400) {\n                callback(\"User with email \" + email + \" already exists\");\n              } else if (body.statusCode === 200) {\n                // Set the first and last name\n                var data = JSON.parse(body.body);\n                var token = data.auth.token;\n                var valid_until = data.auth.valid_until;\n                request({\n                  \"method\": \"POST\",\n                  uri: ENDPOINTS.update,\n                  body: {\n                    updates: {\n                      \"$set\": {\n                        \"first_name\": firstname,\n                        \"last_name\": lastname\n                      }\n                    },\n                    user_email: email,\n                    auth_email: email,\n                    auth: token\n                  },\n                  json: true\n                }, function (error, response, body) {\n                  if (error) {\n                    callback(\"An error occured when attempting signup. Failed at 2/2\");\n                  } else {\n                    if (body.statusCode === 200) {\n                      _this2._login(email, token, valid_until);\n\n                      callback();\n                    } else {\n                      callback(body.body ? body.body : \"Unexpected Error\");\n                    }\n                  }\n                });\n              } else {\n                callback(body.body ? body.body : \"Unexpected Error\");\n              }\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_login\",\n    value: function _login(email, token, valid_until) {\n      cookie.save(\"token\", token);\n      cookie.save(\"email\", email);\n      cookie.save(\"valid_until\", valid_until);\n      this.isLoggedIn = true;\n      this._token = token;\n      this._email = email;\n      this._valid_until = Date.parse(valid_until);\n    }\n  }, {\n    key: \"Logout\",\n    value: function Logout() {\n      cookie.remove(\"token\");\n      cookie.remove(\"email\");\n      cookie.remove(\"valid_until\");\n      this._token = null;\n      this._email = null;\n      this._valid_until = null;\n      this.isLoggedIn = false;\n    }\n  }, {\n    key: \"Get\",\n    value: function Get(callback) {\n      if (this.isLoggedIn) {\n        request({\n          method: \"POST\",\n          uri: ENDPOINTS.userData,\n          body: {\n            email: this._email,\n            token: this._token,\n            query: {\n              email: this._email\n            }\n          },\n          json: true\n        }, function (error, response, body) {\n          if (error) {\n            callback(\"An error occured retrieving data\", null);\n          } else {\n            if (body.statusCode === 200) {\n              callback(null, body.body[0]);\n            } else {\n              callback(body.body ? body.body : \"Unexpected Error\", null);\n            }\n          }\n        });\n      } else {\n        callback(\"Please log in\", null);\n      }\n    }\n  }, {\n    key: \"Set\",\n    value: function Set(data, callback) {\n      if (this.isLoggedIn) {\n        request({\n          \"method\": \"POST\",\n          uri: ENDPOINTS.update,\n          body: {\n            updates: {\n              \"$set\": data\n            },\n            user_email: this._email,\n            auth_email: this._email,\n            auth: this._token\n          },\n          json: true\n        }, function (error, response, body) {\n          console.log(body);\n\n          if (error) {\n            callback(\"An error occured when attempting to update data\");\n          } else {\n            if (body.statusCode === 200) {\n              callback();\n            } else {\n              callback(body.body ? body.body : \"Unexpected Error\");\n            }\n          }\n        });\n      } else {\n        callback(\"Please log in\");\n      }\n    }\n  }, {\n    key: \"Forgot\",\n    value: function Forgot(email, callback) {\n      if (this.isLoggedIn) {\n        callback(\"User is already logged in\");\n      } else {\n        if (!email) {\n          callback(\"Invalid email\");\n        } else {\n          request({\n            method: \"POST\",\n            uri: ENDPOINTS.forgot,\n            body: {\n              email: email,\n              forgot: true\n            },\n            json: true\n          }, function (error, response, body) {\n            if (error) {\n              callback(\"An error occured when attempting to general url\");\n            } else {\n              if (body.statusCode === 200) {\n                callback();\n              } else {\n                callback(body.body ? body.body : \"Unexpected Error\");\n\n                if (body.errorMessage) {\n                  console.log(body.errorMessage);\n                }\n              }\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"Reset\",\n    value: function Reset(email, password, conpassword, magic, callback) {\n      if (!password) {\n        callback(\"Input a new password\");\n      } else if (!conpassword) {\n        callback(\"Confirm your new password\");\n      } else if (password !== conpassword) {\n        callback(\"Passwords don't match!\");\n      } else {\n        request({\n          method: \"POST\",\n          uri: ENDPOINTS.resetpassword,\n          body: {\n            email: email,\n            forgot: true,\n            password: password,\n            link: magic\n          },\n          json: true\n        }, function (error, response, body) {\n          if (error) {\n            callback(\"An error occured when attempting to reset password\");\n          } else {\n            if (body.errorMessage && body.errorMessage.includes(\"timed out\")) {\n              callback(\"Link expired\");\n            } else if (body.errorMessage) {\n              callback(body.errorMessage);\n            } else if (body.statusCode === 200) {\n              callback();\n            } else {\n              callback(body.body ? body.body : \"Unexpected Error\");\n            }\n          }\n        });\n      }\n    }\n  }]);\n\n  return Profile;\n}();\n/***************************************************************PROFILE***************************************************************/\n\n/***************************************************************EXPORTS***************************************************************/\n\n\nexport { Profile };\n/***************************************************************EXPORTS***************************************************************/","map":{"version":3,"sources":["/Users/dhruvilpatel/Documents/Sponsorship/frontend/src/components/Profile.js"],"names":["cookie","request","defaults","BASE","process","env","NODE_ENV","window","location","origin","includes","rest","dev","prod","ENDPOINTS","Profile","Login","bind","Logout","SignUp","_login","_token","load","_email","_valid_until","Date","parse","now","isLoggedIn","email","password","callback","method","uri","login","body","json","error","response","statusCode","data","JSON","token","auth","valid_until","firstname","lastname","confirmpassword","signup","registration_status","console","log","update","updates","user_email","auth_email","save","remove","userData","query","forgot","errorMessage","conpassword","magic","resetpassword","link"],"mappings":"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","sourcesContent":["/**\n * @author Shivan Modha\n * @description User Profile Handler with Server Side Interaction\n * @version 0.0.1\n * Created 12/26/18\n */\n/***************************************************************IMPORTS***************************************************************/\nimport cookie from \"react-cookies\";\nimport request from \"request\";\nimport { defaults } from \"../Defaults\";\n/***************************************************************IMPORTS***************************************************************/\n\n/***************************************************************PROFILE***************************************************************/\n/**\n * Configure the all of the urls that we will need to access the rest api\n */\nconst BASE = ((process.env.NODE_ENV && process.env.NODE_ENV === \"development\") || window.location.origin.includes(\"dev.hackru.org\")) ? (defaults.rest.dev) : (defaults.rest.prod);\nconst ENDPOINTS = {\n    /**\n     * Default login url\n     * @params\n     * {\n     *     \"headers\": {\n     *         \"Content-Type\": \"application/json\"\n     *     },\n     *     \"body\": {\n     *         \"email\": \"<EMAIL>\",\n     *         \"password\": \"<PASSWORD>\"\n     *     }\n     * }\n     * @returns \n     * {\n     *     \"statusCode\": 200,\n     *     \"isBase64Encoded\": false,\n     *     \"headers\": {\n     *         \"Content-Type\": \"application/json\",\n     *         \"Access-Control-Allow-Origin\": [\n     *             \"*\"\n     *         ],\n     *         \"Access-Control-Allow-Headers\": [\n     *             \"Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\"\n     *         ],\n     *         \"Access-Control-Allow-Credentials\": [\n     *             true\n     *         ]\n     *     },\n     *     \"body\": \"{\\\"auth\\\": {\\\"token\\\": \\\"a6390c07-3bef-4062-ae69-3a0e983af124\\\", \\\"valid_until\\\": \\\"2018-12-29T18:41:17.225329\\\", \\\"email\\\": \\\"TESTING123\\\"}}\"\n     * }\n     */\n    \"login\": BASE + \"/authorize\",\n    /**\n     * Default signup url, expects\n     */\n    \"signup\": BASE + \"/create\",\n    /**\n     * Default logout url, expects\n     */\n    \"logout\": \"< IMPLEMENT ME >\",\n    /**\n     * Default user url, expects\n     */\n    \"userData\": BASE + \"/read\",\n    /**\n     * Default user update information, expects\n     */\n    \"update\": BASE + \"/update\",\n    /**\n     * Create forgot magic link to reset password\n     */\n    \"forgot\": BASE + \"/createmagiclink\",\n    /**\n     * Reset password from magic link to reset password\n     */\n    \"resetpassword\": BASE + \"/consume\",\n}\n/**\n * Standard profile handler for the entire application\n */\nclass Profile {\n    constructor() {\n        this.Login = this.Login.bind(this);\n        this.Logout = this.Logout.bind(this);\n        this.SignUp = this.SignUp.bind(this);\n        this._login = this._login.bind(this);\n        this._token = cookie.load(\"token\");\n        this._email = cookie.load(\"email\");\n        this._valid_until = Date.parse(cookie.load(\"valid_until\"));\n        if (this._token && this._email && this._valid_until && this._valid_until > Date.now()) {\n            this.isLoggedIn = true;\n        } else {\n            this.isLoggedIn = false;\n        }\n    }\n    Login(email, password, callback) {\n        if (this.isLoggedIn) {\n            callback(\"User is already logged in\");\n        } else {\n            if (!email) {\n                callback(\"Invalid email\");\n            } else if (!password) {\n                callback(\"Invalid password\");\n            } else {\n                request({\n                    method: \"POST\",\n                    uri: ENDPOINTS.login,\n                    body: {\n                        email: email,\n                        password: password\n                    },\n                    json: true\n                }, (error, response, body) => {\n                    if (error) {\n                        callback(\"An error occured when attempting login\");\n                    } else {\n                        if (body.statusCode === 403) {\n                            callback(\"Invalid email or password\")\n                        } else if (body.statusCode === 200) {\n                            let data = JSON.parse(body.body);\n                            let token = data.auth.token;\n                            let valid_until = data.auth.valid_until;\n                            this._login(email, token, valid_until);\n                            callback();\n                        } else {\n                            callback((body.body) ? (body.body) : (\"Unexpected Error\"));\n                        }\n                    }\n                });\n            }\n        }\n    }\n    SignUp(firstname, lastname, email, password, confirmpassword, callback) {\n        if (this.isLoggedIn) {\n            callback(\"User is already logged in\");\n        } else {\n            if (!firstname) {\n                callback(\"Invalid first name\");\n            } else if (!lastname) {\n                callback(\"Invalid last name\");\n            } else if (!email) {\n                callback(\"Invalid email\");\n            } else if (!password) {\n                callback(\"Invalid password\");\n            } else if (!confirmpassword) {\n                callback(\"Invalid password\");\n            } else if (password !== confirmpassword) {\n                callback(\"Passwords don't match\");\n            } else {\n                /*\n                From the legacy code. These are all of the fields of registration_status, and what they mean\n                ```jsx\n                const displayStatuses = {\n                    'unregistered': 'Not registered',\n                    'registered': 'Application submitted',\n                    'rejected': 'Application submitted',\n                    'checked-in': 'Checked in!',\n                    'confirmation': 'Accepted! Please RSVP',\n                    'coming': 'Attending',\n                    'not-coming': 'Not Attending',\n                    'confirmed': 'Attendance confirmed!',\n                    'waitlist': 'Application submitted'\n                };\n                ```\n                */\n                request({\n                    method: \"POST\",\n                    uri: ENDPOINTS.signup,\n                    body: {\n                        email: email,\n                        password: password,\n                        registration_status: \"unregistered\" //\"waitlist\" is one of them\n                    },\n                    json: true\n                }, (error, response, body) => {\n                    if (error) {\n                        callback(\"An error occured when attempting signup. Failed at 1/2\");\n                    } else {\n                        console.log(body);\n                        if (body.statusCode === 400) {\n                            callback(\"User with email \" + email + \" already exists\")\n                        } else if (body.statusCode === 200) {\n                            // Set the first and last name\n                            let data = JSON.parse(body.body);\n                            let token = data.auth.token;\n                            let valid_until = data.auth.valid_until;\n                            request({\n                                \"method\": \"POST\",\n                                uri: ENDPOINTS.update,\n                                body: {\n                                    updates: {\n                                        \"$set\": {\n                                            \"first_name\": firstname,\n                                            \"last_name\": lastname\n                                        }\n                                    },\n                                    user_email: email,\n                                    auth_email: email,\n                                    auth: token\n                                },\n                                json: true\n                            }, (error, response, body) => {\n                                if (error) {\n                                    callback(\"An error occured when attempting signup. Failed at 2/2\")\n                                } else {\n                                    if (body.statusCode === 200) {\n                                        this._login(email, token, valid_until);\n                                        callback();\n                                    } else {\n                                        callback((body.body) ? (body.body) : (\"Unexpected Error\"));\n                                    }\n                                }\n                            });\n                        } else {\n                            callback((body.body) ? (body.body) : (\"Unexpected Error\"));\n                        }\n                    }\n                });\n            }\n        }\n    }\n    _login(email, token, valid_until) {\n        cookie.save(\"token\", token);\n        cookie.save(\"email\", email);\n        cookie.save(\"valid_until\", valid_until);\n        this.isLoggedIn = true;\n        this._token = token;\n        this._email = email;\n        this._valid_until = Date.parse(valid_until);\n    }\n    Logout() {\n        cookie.remove(\"token\");\n        cookie.remove(\"email\");\n        cookie.remove(\"valid_until\");\n        this._token = null;\n        this._email = null;\n        this._valid_until = null;\n        this.isLoggedIn = false;\n    }\n    Get(callback) {\n        if (this.isLoggedIn) {\n            request({\n                method: \"POST\",\n                uri: ENDPOINTS.userData,\n                body: {\n                    email: this._email,\n                    token: this._token,\n                    query: {\n                        email: this._email\n                    }\n                },\n                json: true\n            }, (error, response, body) => {\n                if (error) {\n                    callback(\"An error occured retrieving data\", null)\n                } else {\n                    if (body.statusCode === 200) {\n                        callback(null, body.body[0]);\n                    } else {\n                        callback((body.body) ? (body.body) : (\"Unexpected Error\"), null);\n                    }\n                }\n            });\n        } else {\n            callback(\"Please log in\", null);\n        }\n    }\n    Set(data, callback) {\n        if (this.isLoggedIn) {\n            request({\n                \"method\": \"POST\",\n                uri: ENDPOINTS.update,\n                body: {\n                    updates: {\n                        \"$set\": data\n                    },\n                    user_email: this._email,\n                    auth_email: this._email,\n                    auth: this._token\n                },\n                json: true\n            }, (error, response, body) => {\n                console.log(body);\n                if (error) {\n                    callback(\"An error occured when attempting to update data\")\n                } else {\n                    if (body.statusCode === 200) {\n                        callback();\n                    } else {\n                        callback((body.body) ? (body.body) : (\"Unexpected Error\"));\n                    }\n                }\n            });\n        } else {\n            callback(\"Please log in\");\n        }\n    }\n    Forgot(email, callback) {\n        if (this.isLoggedIn) {\n            callback(\"User is already logged in\");\n        } else {\n            if (!email) {\n                callback(\"Invalid email\");\n            } else {\n                request({\n                    method: \"POST\",\n                    uri: ENDPOINTS.forgot,\n                    body: {\n                        email: email,\n                        forgot: true\n                    },\n                    json: true\n                }, (error, response, body) => {\n                    if (error) {\n                        callback(\"An error occured when attempting to general url\");\n                    } else {\n                        if (body.statusCode === 200) {\n                            callback();\n                        } else {\n                            callback((body.body) ? (body.body) : (\"Unexpected Error\"));\n                            if (body.errorMessage) {\n                                console.log(body.errorMessage);\n                            }\n                        }\n                    }\n                });\n            }\n        }\n    }\n    Reset(email, password, conpassword, magic, callback) {\n        if (!password) {\n            callback(\"Input a new password\");\n        } else if (!conpassword) {\n            callback(\"Confirm your new password\");\n        } else if (password !== conpassword) {\n            callback(\"Passwords don't match!\")\n        } else {\n            request({\n                method: \"POST\",\n                uri: ENDPOINTS.resetpassword,\n                body: {\n                    email: email,\n                    forgot: true,\n                    password: password,\n                    link: magic\n                },\n                json: true\n            }, (error, response, body) => {\n                if (error) {\n                    callback(\"An error occured when attempting to reset password\");\n                } else {\n                    if (body.errorMessage && body.errorMessage.includes(\"timed out\")) {\n                        callback(\"Link expired\");\n                    } else if (body.errorMessage) {\n                        callback(body.errorMessage);\n                    } else if (body.statusCode === 200) {\n                        callback();\n                    } else {\n                        callback((body.body) ? (body.body) : (\"Unexpected Error\"));\n                    }\n                }\n            });\n        }\n    }\n}\n/***************************************************************PROFILE***************************************************************/\n\n/***************************************************************EXPORTS***************************************************************/\nexport { Profile };\n/***************************************************************EXPORTS***************************************************************/"]},"metadata":{},"sourceType":"module"}