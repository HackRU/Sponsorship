{"ast":null,"code":"import _classCallCheck from \"/Users/dhruvilpatel/Documents/Sponsorship/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dhruvilpatel/Documents/Sponsorship/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dhruvilpatel/Documents/Sponsorship/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dhruvilpatel/Documents/Sponsorship/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dhruvilpatel/Documents/Sponsorship/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dhruvilpatel/Documents/Sponsorship/frontend/src/components/Dashboard/ResumeUploader.jsx\";\nimport React, { Component } from 'react';\nimport { CustomInput, FormGroup } from 'reactstrap';\nimport { defaults } from '../../Defaults'; // A file picker widget that lets a user upload a resume to the S3 bucket\n// If the user has a resume, they may upload one again, but the widget will indicate they don't need to\n// The S3 bucket is configured to allow public writes, so no credentials are needed to perform the PUT query\n\nvar ResumeUploader =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResumeUploader, _Component);\n\n  function ResumeUploader() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResumeUploader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResumeUploader)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      labelText: 'Choose a PDF to upload.' // Make a request to S3 and return if it succeeded or failed\n\n    };\n\n    _this.makeRequest = function (params) {\n      return (// Use the userEmail as the S3 key for the upload\n        fetch(defaults.rest.resumes + '/' + encodeURI(_this.props.userEmail) + '.pdf', params).then(function (response) {\n          return response.ok;\n        }) // Was the response not an error?\n        .catch(function (error) {\n          return false;\n        }) // If there were any exceptions, we did not succeed\n\n      );\n    };\n\n    _this.uploadHandler = function (event) {\n      _this.setState({\n        labelText: 'Uploading resume...'\n      }); // Upload the resume to S3\n\n\n      _this.makeRequest({\n        method: 'PUT',\n        // Use the file from the filepicker\n        body: event.target.files[0]\n      }).then(function (success) {\n        return _this.setState({\n          labelText: success ? 'Resume uploaded successfully.' : 'Failed to upload resume'\n        });\n      });\n    };\n\n    _this.render = function () {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \" Upload a Resume \"), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        accept: \".pdf\",\n        id: \"resume\",\n        onChange: _this.uploadHandler,\n        type: \"file\",\n        label: _this.state.labelText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })));\n    };\n\n    return _this;\n  }\n\n  _createClass(ResumeUploader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Check if the user has already uploaded a resume and update the label accordingly\n      this.makeRequest({\n        method: 'HEAD'\n      }).then(function (success) {\n        return success && _this2.setState({\n          labelText: 'Resume found.'\n        });\n      });\n    }\n  }]);\n\n  return ResumeUploader;\n}(Component);\n\nexport default ResumeUploader;","map":{"version":3,"sources":["/Users/dhruvilpatel/Documents/Sponsorship/frontend/src/components/Dashboard/ResumeUploader.jsx"],"names":["React","Component","CustomInput","FormGroup","defaults","ResumeUploader","state","labelText","makeRequest","params","fetch","rest","resumes","encodeURI","props","userEmail","then","response","ok","catch","error","uploadHandler","event","setState","method","body","target","files","success","render"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,YAAvC;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CAEA;AACA;AACA;;IAEMC,c;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,SAAS,EAAE,yBADP,CAIR;;AAJQ,K;;UAKRC,W,GAAc,UAACC,MAAD;AAAA,aACV;AACAC,QAAAA,KAAK,CAACN,QAAQ,CAACO,IAAT,CAAcC,OAAd,GAAwB,GAAxB,GAA8BC,SAAS,CAAC,MAAKC,KAAL,CAAWC,SAAZ,CAAvC,GAAgE,MAAjE,EAAyEN,MAAzE,CAAL,CACKO,IADL,CACU,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,EAAb;AAAA,SADlB,EACmC;AADnC,SAEKC,KAFL,CAEW,UAAAC,KAAK;AAAA,iBAAI,KAAJ;AAAA,SAFhB,CAFU,CAIiB;;AAJjB;AAAA,K;;UAOdC,a,GAAgB,UAACC,KAAD,EAAW;AACvB,YAAKC,QAAL,CAAc;AAAEhB,QAAAA,SAAS,EAAE;AAAb,OAAd,EADuB,CAEvB;;;AACA,YAAKC,WAAL,CAAiB;AACbgB,QAAAA,MAAM,EAAE,KADK;AAEb;AACAC,QAAAA,IAAI,EAAEH,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB;AAHO,OAAjB,EAKKX,IALL,CAKU,UAAAY,OAAO;AAAA,eAAI,MAAKL,QAAL,CAAc;AAC3BhB,UAAAA,SAAS,EAAEqB,OAAO,GAAG,+BAAH,GAAqC;AAD5B,SAAd,CAAJ;AAAA,OALjB;AAQH,K;;UAUDC,M,GAAS;AAAA,aACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,EAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AACI,QAAA,MAAM,EAAC,MADX;AAEI,QAAA,EAAE,EAAC,QAFP;AAGI,QAAA,QAAQ,EAAE,MAAKR,aAHnB;AAII,QAAA,IAAI,EAAC,MAJT;AAKI,QAAA,KAAK,EAAE,MAAKf,KAAL,CAAWC,SALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,CADK;AAAA,K;;;;;;;wCARW;AAAA;;AAChB;AACA,WAAKC,WAAL,CAAiB;AACbgB,QAAAA,MAAM,EAAE;AADK,OAAjB,EAGKR,IAHL,CAGU,UAAAY,OAAO;AAAA,eAAIA,OAAO,IAAI,MAAI,CAACL,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd,CAAf;AAAA,OAHjB;AAIH;;;;EAhCwBN,S;;AAkD7B,eAAeI,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport { CustomInput, FormGroup } from 'reactstrap';\nimport { defaults } from '../../Defaults'\n\n// A file picker widget that lets a user upload a resume to the S3 bucket\n// If the user has a resume, they may upload one again, but the widget will indicate they don't need to\n// The S3 bucket is configured to allow public writes, so no credentials are needed to perform the PUT query\n\nclass ResumeUploader extends Component {\n    state = {\n        labelText: 'Choose a PDF to upload.'\n    }\n\n    // Make a request to S3 and return if it succeeded or failed\n    makeRequest = (params) => (\n        // Use the userEmail as the S3 key for the upload\n        fetch(defaults.rest.resumes + '/' + encodeURI(this.props.userEmail) + '.pdf', params)\n            .then(response => response.ok) // Was the response not an error?\n            .catch(error => false) // If there were any exceptions, we did not succeed\n    )\n\n    uploadHandler = (event) => {\n        this.setState({ labelText: 'Uploading resume...' })\n        // Upload the resume to S3\n        this.makeRequest({\n            method: 'PUT',\n            // Use the file from the filepicker\n            body: event.target.files[0]\n        })\n            .then(success => this.setState({\n                labelText: success ? 'Resume uploaded successfully.' : 'Failed to upload resume'\n            }))\n    }\n\n    componentDidMount() {\n        // Check if the user has already uploaded a resume and update the label accordingly\n        this.makeRequest({\n            method: 'HEAD'\n        })\n            .then(success => success && this.setState({ labelText: 'Resume found.' }))\n    }\n\n    render = () => (\n        <div>\n            <h4> Upload a Resume </h4>\n            <FormGroup>\n                <CustomInput\n                    accept=\".pdf\"\n                    id=\"resume\"\n                    onChange={this.uploadHandler}\n                    type=\"file\"\n                    label={this.state.labelText}\n                />\n            </FormGroup>\n        </div>\n    )\n}\n\nexport default ResumeUploader\n"]},"metadata":{},"sourceType":"module"}